
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE ELSE EQUAL EXCLAMATION FALSE GREATER IDENTIFIER IF LBRACE LESS LOOP LPAREN MINUS MULTIPLY NEWLINE NUMBER PLUS PRINT RBRACE RPAREN SEMICOLON STRING TRUEprogram : statement\n               | statement programstatement : PRINT LPAREN STRING RPAREN SEMICOLONstatement : IDENTIFIER EQUAL expression SEMICOLONstatement : IF LPAREN expression RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACEstatement : LOOP LPAREN NUMBER RPAREN LBRACE program RBRACEexpression : expression PLUS term\n                  | expression MINUS term\n                  | termexpression : TRUE\n                  | FALSEexpression : expression GREATER expression\n                  | expression LESS expressionterm : term MULTIPLY factor\n            | term DIVIDE factor\n            | factorfactor : NUMBERfactor : IDENTIFIER'
    
_lr_action_items = {'PRINT':([0,2,23,32,39,40,44,46,48,],[3,3,-4,-3,3,3,-6,3,-5,]),'IDENTIFIER':([0,2,9,10,23,24,25,26,27,28,29,32,39,40,44,46,48,],[4,4,13,13,-4,13,13,13,13,13,13,-3,4,4,-6,4,-5,]),'IF':([0,2,23,32,39,40,44,46,48,],[5,5,-4,-3,5,5,-6,5,-5,]),'LOOP':([0,2,23,32,39,40,44,46,48,],[6,6,-4,-3,6,6,-6,6,-5,]),'$end':([1,2,7,23,32,44,48,],[0,-1,-2,-4,-3,-6,-5,]),'RBRACE':([2,7,23,32,41,42,44,47,48,],[-1,-2,-4,-3,43,44,-6,48,-5,]),'LPAREN':([3,5,6,],[8,10,11,]),'EQUAL':([4,],[9,]),'STRING':([8,],[12,]),'TRUE':([9,10,26,27,],[16,16,16,16,]),'FALSE':([9,10,26,27,],[17,17,17,17,]),'NUMBER':([9,10,11,24,25,26,27,28,29,],[19,19,21,19,19,19,19,19,19,]),'RPAREN':([12,13,15,16,17,18,19,20,21,33,34,35,36,37,38,],[22,-18,-9,-10,-11,-16,-17,30,31,-7,-8,-12,-13,-14,-15,]),'MULTIPLY':([13,15,18,19,33,34,37,38,],[-18,28,-16,-17,28,28,-14,-15,]),'DIVIDE':([13,15,18,19,33,34,37,38,],[-18,29,-16,-17,29,29,-14,-15,]),'SEMICOLON':([13,14,15,16,17,18,19,22,33,34,35,36,37,38,],[-18,23,-9,-10,-11,-16,-17,32,-7,-8,-12,-13,-14,-15,]),'PLUS':([13,14,15,16,17,18,19,20,33,34,35,36,37,38,],[-18,24,-9,-10,-11,-16,-17,24,-7,-8,24,24,-14,-15,]),'MINUS':([13,14,15,16,17,18,19,20,33,34,35,36,37,38,],[-18,25,-9,-10,-11,-16,-17,25,-7,-8,25,25,-14,-15,]),'GREATER':([13,14,15,16,17,18,19,20,33,34,35,36,37,38,],[-18,26,-9,-10,-11,-16,-17,26,-7,-8,26,26,-14,-15,]),'LESS':([13,14,15,16,17,18,19,20,33,34,35,36,37,38,],[-18,27,-9,-10,-11,-16,-17,27,-7,-8,27,27,-14,-15,]),'LBRACE':([30,31,45,],[39,40,46,]),'ELSE':([43,],[45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,39,40,46,],[1,7,41,42,47,]),'statement':([0,2,39,40,46,],[2,2,2,2,2,]),'expression':([9,10,26,27,],[14,20,35,36,]),'term':([9,10,24,25,26,27,],[15,15,33,34,15,15,]),'factor':([9,10,24,25,26,27,28,29,],[18,18,18,18,18,18,37,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','kannada_parser.py',7),
  ('program -> statement program','program',2,'p_program','kannada_parser.py',8),
  ('statement -> PRINT LPAREN STRING RPAREN SEMICOLON','statement',5,'p_statement_print','kannada_parser.py',12),
  ('statement -> IDENTIFIER EQUAL expression SEMICOLON','statement',4,'p_statement_assign','kannada_parser.py',16),
  ('statement -> IF LPAREN expression RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE','statement',11,'p_statement_if','kannada_parser.py',20),
  ('statement -> LOOP LPAREN NUMBER RPAREN LBRACE program RBRACE','statement',7,'p_statement_loop','kannada_parser.py',27),
  ('expression -> expression PLUS term','expression',3,'p_expression_arithmetic','kannada_parser.py',32),
  ('expression -> expression MINUS term','expression',3,'p_expression_arithmetic','kannada_parser.py',33),
  ('expression -> term','expression',1,'p_expression_arithmetic','kannada_parser.py',34),
  ('expression -> TRUE','expression',1,'p_expression_boolean','kannada_parser.py',44),
  ('expression -> FALSE','expression',1,'p_expression_boolean','kannada_parser.py',45),
  ('expression -> expression GREATER expression','expression',3,'p_expression_comparison','kannada_parser.py',49),
  ('expression -> expression LESS expression','expression',3,'p_expression_comparison','kannada_parser.py',50),
  ('term -> term MULTIPLY factor','term',3,'p_term_multiplication','kannada_parser.py',57),
  ('term -> term DIVIDE factor','term',3,'p_term_multiplication','kannada_parser.py',58),
  ('term -> factor','term',1,'p_term_multiplication','kannada_parser.py',59),
  ('factor -> NUMBER','factor',1,'p_factor_number','kannada_parser.py',69),
  ('factor -> IDENTIFIER','factor',1,'p_factor_identifier','kannada_parser.py',73),
]
